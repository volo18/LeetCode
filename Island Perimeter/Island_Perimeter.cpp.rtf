{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13420\viewh12740\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
        \
private:\
\
    \
    bool isNeighbour(vector<vector<int>> &grid, int a, int b)\
    \{\
        int nRows = grid.size();\
        int nCols = grid[0].size();\
        \
        if ( (a >= 0)  && (a < nRows) &&  (b >= 0) && (b < nCols) )\
            if (grid[a][b] > 0 )\
                return true;\
                        \
        return false;   \
    \}\
    \
public:\
    int islandPerimeter(vector<vector<int>>& grid) \{\
        \
        int nRows = grid.size();\
        int nCols = grid[0].size();\
        \
        int perimeter = 0;\
        for (int ii = 0; ii < nRows; ii++)\
        \{\
           for (int jj = 0; jj < nCols; jj++)\
           \{\
               if (grid[ii][jj] == 0)\
                   continue;\
               \
               int nNeighbours = 0;\
               \
               //above\
               if ( isNeighbour(grid,ii-1, jj) )\
                   nNeighbours++;\
               \
               //below\
               if ( isNeighbour(grid,ii+1, jj) )\
                   nNeighbours++;\
               \
                //right\
               if ( isNeighbour(grid,ii, jj+1) )\
                   nNeighbours++;\
               \
                //left\
               if ( isNeighbour(grid,ii, jj-1) )\
                   nNeighbours++;\
               \
               \
               perimeter  += 4 - nNeighbours;\
           \}\
        \}\
               \
        return perimeter;\
        \
    \}\
\};}